<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">YP部落</title>
    <subtitle type="html">MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</subtitle>
    <updated>2022-10-06T00:37:37&#43;08:00</updated>
    <id>https://YPBlog.cn/</id>
    <link rel="alternate" type="text/html" href="https://YPBlog.cn/" />
    <link rel="self" type="application/atom&#43;xml" href="https://YPBlog.cn/atom.xml" />
    <author>
            <name>Ryan Lu</name>
            <uri>https://YPBlog.cn/</uri>
            
                <email>lyydev@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.104.2">Hugo</generator>
        <entry>
            <title type="text">Django&#43;uWSGI&#43;nginx部署原理及工作流程</title>
            <link rel="alternate" type="text/html" href="https://YPBlog.cn/post/django-uwsgi-nginx/" />
            <id>https://YPBlog.cn/post/django-uwsgi-nginx/</id>
            <updated>2022-10-06T00:37:31&#43;08:00</updated>
            <published>2022-10-06T00:24:04&#43;08:00</published>
            <author>
                    <name>Ryan Lu</name>
                    <uri>http://YPBlog.cn</uri>
                    <email>lyydev@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Django+uWSGI+nginx部署原理及工作流程 1、各组件工作流程： Djang……</summary>
            
                <content type="html">&lt;h2 id=&#34;djangouwsginginx部署原理及工作流程&#34;&gt;Django+uWSGI+nginx部署原理及工作流程&lt;/h2&gt;
&lt;h3 id=&#34;1各组件工作流程&#34;&gt;1、各组件工作流程：&lt;/h3&gt;
&lt;h4 id=&#34;django本身只是一个基于python语言写的一个开源web框架不具备服务器网关功能不可以直接访问得到如果我们想通过外网访问django项目那么我们做为客户端首先向服务端发出请求这时服务端有一个对外服务的组件或接口如nginxapche等接收客户端发来的http请求并对这个请求进行解包分析如果是静态文件请求就根据nginx配置的静态文件目录返回请求的资源如果是动态的请求nginx就通过配置文件将请求传递给uwsgi然后uwsgi-将接收到的包进行处理并转发给wsgiwsgi根据请求调用django工程的某个文件或函数处理完后django将返回值交给wsgi最后wsgi将返回值进行打包转发给uwsgiuwsgi接收后转发给nginxnginx最终将返回值返回给客户端如浏览器&#34;&gt;Django本身只是一个基于Python语言写的一个开源WEb框架，不具备服务器网关功能，不可以直接访问得到。如果我们想通过外网访问Django项目。那么我们做为客户端，首先向服务端发出请求，这时服务端有一个对外服务的组件或接口（如Nginx、Apche等）接收客户端发来的HTTP请求，并对这个请求进行解包分析，如果是静态文件请求就根据nginx配置的静态文件目录，返回请求的资源，如果是动态的请求,nginx就通过配置文件,将请求传递给uWSGI；然后uWSGI 将接收到的包进行处理，并转发给wsgi，wsgi根据请求调用django工程的某个文件或函数，处理完后django将返回值交给wsgi，最后wsgi将返回值进行打包，转发给uWSGI，uWSGI接收后转发给nginx，nginx最终将返回值返回给客户端(如浏览器)。&lt;/h4&gt;
&lt;h4 id=&#34;httpswwwdjangocnmediaupimg111_20220109140900_542jpg&#34;&gt;&lt;img src=&#34;https://www.django.cn/media/upimg/111_20220109140900_542.jpg&#34; alt=&#34;&#34;&gt;&lt;/h4&gt;
&lt;h4 id=&#34;在上边我们有提及了nginxuwsgiwsgi下边我对这几个组件进行简单介绍一下&#34;&gt;在上边我们有提及了Nginx、uWsgi、wsgi，下边我对这几个组件进行简单介绍一下。&lt;/h4&gt;
&lt;h3 id=&#34;wsgi&#34;&gt;wsgi:&lt;/h3&gt;
&lt;h4 id=&#34;django项目携带的一个wsgi接口文件如果项目名叫myblog的话此文件就位于myblogmyblogwsgipy目录中一种实现python解析的通用接口标准协议是一种通用的接口标准或者接口协议实现了python-web程序与服务器之间交互的通用性-利用它django等的python-web开发框架就可以轻松地部署在不同的web-server上了&#34;&gt;Django项目携带的一个wsgi接口文件如果项目名叫myblog的话，此文件就位于[myblog/myblog/wsgi.py]目录中一种实现python解析的通用接口标准/协议，是一种通用的接口标准或者接口协议，实现了python web程序与服务器之间交互的通用性。 利用它，django等的python web开发框架，就可以轻松地部署在不同的web server上了。&lt;/h4&gt;
&lt;h3 id=&#34;uwsgi&#34;&gt;uWSGI：&lt;/h3&gt;
&lt;h4 id=&#34;一个基于自有的uwsgi协议wsgi协议和http服务协议的web网关它一种python-web-server或称为servergatewayuwsgi是实现了uwsgi和wsgi两种协议的web服务器负责响应python-的web请求&#34;&gt;一个基于自有的uwsgi协议、wsgi协议和http服务协议的web网关。它一种python web server或称为Server/Gateway。uWSGI是实现了uwsgi和WSGI两种协议的Web服务器，负责响应python 的web请求。&lt;/h4&gt;
&lt;h3 id=&#34;nginx&#34;&gt;Nginx：&lt;/h3&gt;
&lt;h4 id=&#34;一个常用高性能代理服务器它自己没有解析动态语言的功能所以分给其它模块来做在django部署中uwsgi实现了wsgi协议uwsgi协议http等协议所以nginx中的模块httpuwsgimodule的作用是与uwsgi服务器进行交换&#34;&gt;一个常用高性能代理服务器。它自己没有解析动态语言的功能。所以分给其它模块来做。在Django部署中，uWSGI实现了wsgi协议、uwsgi协议、http等协议，所以Nginx中的模块HttpUwsgiModule的作用是与uWSGI服务器进行交换。&lt;/h4&gt;
&lt;h4 id=&#34;所以我们部署的时候才需要使用-nginx和uwsgi组合部署django其实nginx并不是必须的uwsgi完全可以完成整个的和浏览器交互的流程但nginx在其它安全性或其他的限制可以达到保护程序的作用nginx也可以代理多台uwsgi完成uwsgi的负载均衡且对静态文件的处理能力用nginx来处理更加高效所以才使用nginx与uwsgi一起组合使用&#34;&gt;所以我们部署的时候才需要使用 Nginx和uWSGI组合部署django。其实nginx并不是必须的，uwsgi完全可以完成整个的和浏览器交互的流程；但nginx在其它安全性或其他的限制，可以达到保护程序的作用，nginx也可以代理多台uWSGI完成uWSGI的负载均衡；且对静态文件的处理能力用nginx来处理更加高效，所以才使用Nginx与uWSGI一起组合使用。&lt;/h4&gt;
&lt;h3 id=&#34;二安装与部署&#34;&gt;二、安装与部署&lt;/h3&gt;
&lt;h4 id=&#34;首先确保服务器安装好了python环境并完成了pip的安装如果没有请安装因为大部分linux自带的python版本与django所需要的版本不一致或者想要安装部署多个版本的django或python所以一般推荐使用virtualenv通过虚拟环境来部署&#34;&gt;首先，确保服务器安装好了Python环境，并完成了pip的安装。如果没有请安装。因为大部分Linux自带的Python版本与Django所需要的版本不一致，或者想要安装部署多个版本的Django或Python，所以一般推荐使用virtualenv，通过虚拟环境来部署。&lt;/h4&gt;
&lt;h4 id=&#34;其次确保安装好nginx并能正常运行&#34;&gt;其次，确保安装好nginx,并能正常运行。&lt;/h4&gt;
&lt;h4 id=&#34;然后确保安装好了django及所需的依赖框架包测试方法&#34;&gt;然后，确保安装好了Django及所需的依赖框架包。测试方法:&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python manage.py runserver 0.0.0.0:8000
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;最后安装uwsgi&#34;&gt;最后，安装uWSGI。&lt;/h4&gt;
&lt;h4 id=&#34;上面都没问题了就配置nginx和uwsgi假设我们的django项目名为mysite位于wwwwwwrootmysite目录下&#34;&gt;上面都没问题了，就配置nginx和uwsgi。假设我们的django项目名为mysite，位于/www/wwwroot/mysite目录下。&lt;/h4&gt;
&lt;h3 id=&#34;uwsig配置&#34;&gt;uWsig配置&lt;/h3&gt;
&lt;h4 id=&#34;在项目文件里创建-uwsgiini-文件编辑文件-配置uwsgi&#34;&gt;在项目文件里创建 uwsgi.ini 文件,编辑文件 ，配置uwsgi：&lt;/h4&gt;
&lt;h3 id=&#34;添加配置选择&#34;&gt;添加配置选择&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;[uwsgi]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#配置和nginx连接的socket连接&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;127.0.0.1:8997&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#配置项目路径，项目的所在目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;chdir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;/www/wwwroot/mysite/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#配置wsgi接口模块文件路径,也就是wsgi.py这个文件所在的目录名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;wsgi-file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;mysite/wsgi.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#配置启动的进程数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;processes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#配置每个进程的线程数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#配置启动管理主进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#配置存放主进程的进程号文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;pidfile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;uwsgi.pid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#配置dump日志记录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;daemonize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;uwsgi.log&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;通过下面的命令启动运行uwsgi&#34;&gt;通过下面的命令启动运行uwsgi&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;uwsgi  --ini  uwsgi.ini
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;显示-uwsgi-getting-ini-configuration-from-uwsgiini-表明uwsgi运行成功&#34;&gt;显示 [uWSGI] getting INI configuration from uwsgi.ini 表明uwsgi运行成功&lt;/h4&gt;
&lt;h4 id=&#34;可能通过&#34;&gt;可能通过&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ps -ef|grep uwsgi   
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;查看确认是否uwsgi启动&#34;&gt;查看确认是否uwsgi启动.&lt;/h4&gt;
&lt;p&gt;uwsg.ini配置文件其它相关命令:&lt;/p&gt;
&lt;h4 id=&#34;停止运行uwsgi通过包含主进程编号的文件设置停止项目&#34;&gt;停止运行uwsgi，通过包含主进程编号的文件设置停止项目&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;uwsgi --stop uwsgi.pid
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;重启uwsgi&#34;&gt;重启uwsgi&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;uwsgi --reload uwsgi.pid
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nginx配置&#34;&gt;nginx配置&lt;/h2&gt;
&lt;h4 id=&#34;假设nginx安装好的路径为usrlocalnginx则在usrlocalnginxconf中先备份一下nginxconf文件以防意外&#34;&gt;假设nginx安装好的路径为/usr/local/nginx，则在/usr/local/nginx/conf/中先备份一下nginx.conf文件，以防意外。&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cp nginx.conf nginx.conf.bak
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;然后打开nginxconf把原来的内容删除直接加入以下内容&#34;&gt;然后打开nginx.conf，把原来的内容删除，直接加入以下内容：&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    server {
        listen 80;
        server_name  www.django.cn; #改为自己的域名，没域名修改为127.0.0.1:80
        charset utf-8;
        location / {
           include uwsgi_params;
           uwsgi_pass 127.0.0.1:8997;  #端口要和uwsgi里配置的一样
           uwsgi_param UWSGI_SCRIPT mysite.wsgi;  #wsgi.py所在的目录名+.wsgi
           uwsgi_param UWSGI_CHDIR /www/wwwroot/mysite/; #项目路径
           
        }
        location /static/ {
        alias /www/wwwroot/mysite/static/; #静态资源路径
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;进入usrlocalnginxsbin目录&#34;&gt;进入/usr/local/nginx/sbin/目录&lt;/h4&gt;
&lt;h4 id=&#34;执行&#34;&gt;执行&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./nginx -t
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;命令先检查配置文件是否有错没有错就执行以下命令&#34;&gt;命令先检查配置文件是否有错，没有错就执行以下命令：&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./nginx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;这样不出意外就能部署成功&#34;&gt;这样不出意外就能部署成功。&lt;/h2&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://YPBlog.cn/categories/python/" term="Python" label="Python" />
                            
                        
                    
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://YPBlog.cn/tags/python/" term="Python" label="Python" />
                            
                        
                            
                            
                            
                                <category scheme="https://YPBlog.cn/tags/django/" term="Django" label="Django" />
                            
                        
                            
                            
                            
                                <category scheme="https://YPBlog.cn/tags/nginx/" term="Nginx" label="Nginx" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">如何将Markdown文章轻松地搬运到微信公众号并完美地呈现代码内容</title>
            <link rel="alternate" type="text/html" href="https://YPBlog.cn/post/how-to-put-markdown-to-wechat/" />
            <id>https://YPBlog.cn/post/how-to-put-markdown-to-wechat/</id>
            <updated>2022-10-06T00:23:24&#43;08:00</updated>
            <published>2022-10-05T23:18:49&#43;08:00</published>
            <author>
                    <name>Ryan Lu</name>
                    <uri>http://YPBlog.cn</uri>
                    <email>lyydev@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">首先奉上本文即将介绍的工具地址：https://md.openwrite.cn/ 最新……</summary>
            
                <content type="html">&lt;h4 id=&#34;首先奉上本文即将介绍的工具地址httpsmdopenwritecn&#34;&gt;首先奉上本文即将介绍的工具地址：&lt;a href=&#34;https://md.openwrite.cn/&#34;&gt;https://md.openwrite.cn/&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;最新版本httpsmdopenwritecn&#34;&gt;最新版本：&lt;a href=&#34;https://md.openwrite.cn/&#34;&gt;https://md.openwrite.cn/&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;全新的用户体验已远优于下面的介绍建议直接进入体验&#34;&gt;全新的用户体验，已远优于下面的介绍，建议直接进入体验！&lt;/h4&gt;
&lt;h2 id=&#34;使用方法&#34;&gt;使用方法&lt;/h2&gt;
&lt;h4 id=&#34;该工具的使用非常非常简单点击httpblogdidispacecomtoolsonline-markdown打开在线编辑器之后左侧为编辑器右侧为预览区&#34;&gt;该工具的使用非常非常简单，点击&lt;a href=&#34;http://blog.didispace.com/tools/online-markdown/&#34;&gt;http://blog.didispace.com/tools/online-markdown/&lt;/a&gt;打开在线编辑器之后，左侧为编辑器、右侧为预览区。&lt;/h4&gt;
&lt;h4 id=&#34;我们只需要将我们编辑的markdown文档原始内容复制进去右侧的预览区就会自动渲染出非常友好的页面结果如下图可见标题正文代码等都得到了非常好的呈现&#34;&gt;我们只需要将我们编辑的Markdown文档原始内容复制进去，右侧的预览区就会自动渲染出非常友好的页面结果。如下图可见，标题、正文、代码等都得到了非常好的呈现：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://img-hello-world.oss-cn-beijing.aliyuncs.com/abf674b71c937ef772244d52d7fa511e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;接着我们要做的就是把这些内容发布到微信公众号中过程也非常简单只需要点击复制按钮右键页面选择复制再打开微信公众号的图文编辑在编辑框中完成黏贴我们可以看到之前在编辑工具中的结果样式也被一同被复制过来了&#34;&gt;接着，我们要做的就是把这些内容发布到微信公众号中，过程也非常简单，只需要点击“复制”按钮，右键页面，选择“复制”。再打开微信公众号的图文编辑，在编辑框中完成黏贴，我们可以看到之前在编辑工具中的结果样式也被一同被复制过来了：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://img-hello-world.oss-cn-beijing.aliyuncs.com/cc60be34a6f18d6734ff627b2fec046a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;通过上面的方法发布的文章将获得如之前所见的非常友好的排版格式同时对于代码的展示也非常的清晰不会出现杂乱无章的换行同时对于代码的高清也处理得当即使在窄屏的手机端代码格式也不会被积压变形读者可以通过左右滑动的方式来查看完整的代码内容&#34;&gt;通过上面的方法发布的文章将获得如之前所见的、非常友好的排版格式。同时，对于代码的展示也非常的清晰，不会出现杂乱无章的换行，同时对于代码的高清也处理得当。即使在窄屏的手机端，代码格式也不会被积压变形，读者可以通过左右滑动的方式来查看完整的代码内容：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://img-hello-world.oss-cn-beijing.aliyuncs.com/e4977812ee31323b4225317a5e171e80.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;到这里一篇文章的搬运工作就完成了是不是很简单呢如果你也和我一样有很多markdown的文章需要做迁移不如来尝试一下这个在线工具吧&#34;&gt;到这里，一篇文章的搬运工作就完成了，是不是很简单呢？如果你也和我一样，有很多markdown的文章需要做迁移，不如来尝试一下这个在线工具吧！&lt;/h4&gt;
&lt;h3 id=&#34;关于&#34;&gt;关于&lt;/h3&gt;
&lt;h4 id=&#34;该工具是一个开源项目httpsgithubcomdyc87112online-markdown-欢迎大家给予star和follow支持该工具改编自胡子哥哥的开源项目httpsgithubcombarretleeonline-markdown-增加了一些改动比如编辑栏与预览栏的左右布局之后计划增加更多的样式设置也欢迎大家提出宝贵的意见&#34;&gt;该工具是一个开源项目：https://github.com/dyc87112/online-markdown ，欢迎大家给予Star和Follow支持！！该工具改编自胡子哥哥的开源项目：https://github.com/barretlee/online-markdown ，增加了一些改动，比如：编辑栏与预览栏的左右布局。之后计划增加更多的样式设置，也欢迎大家提出宝贵的意见。&lt;/h4&gt;
&lt;h3 id=&#34;本文转自-httpsblogcsdnnetdyc87112articledetails77417572如有侵权请联系删除&#34;&gt;本文转自 &lt;a href=&#34;https://blog.csdn.net/dyc87112/article/details/77417572&#34;&gt;https://blog.csdn.net/dyc87112/article/details/77417572&lt;/a&gt;，如有侵权，请联系删除。&lt;/h3&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://YPBlog.cn/categories/markdown/" term="Markdown" label="Markdown" />
                            
                        
                    
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://YPBlog.cn/tags/markdown/" term="Markdown" label="Markdown" />
                            
                        
                    
                
            
        </entry>
    
</feed>
